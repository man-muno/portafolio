package uniandes.cumbia.bpel.elements.flow;

import uniandes.cumbia.openobjects.elements.OpenObject;
import uniandes.cumbia.openobjects.execution.events.generators.EventGenerator;
import uniandes.cumbia.openobjects.execution.instance.ModelInstance;

public abstract class AbstractFlow extends OpenObject implements IFlow
{

    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    private static final String START_FLOW = "start";

    private static final String BACK_TO_EXECUTE_FLOW = "backToExecute";

    private static final String FINALIZING_FLOW = "finalizing";
    
    private static final String REINIT = "reInit";


    // -----------------------------------------------------------------
    // Attributes
    // -----------------------------------------------------------------

    /**
     * Generator of the event initialize
     */
    private EventGenerator generatorStart;

    /**
     * Generator of the event activate
     */
    private EventGenerator generatorBackToExecute;

    /**
     * Generator of the event finalize
     */
    private EventGenerator generatorFinalizing;
    
    /**
     * Generator of the event reInit
     */
    private EventGenerator generatorReInit;

    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------

    /**
     * 
     */
    public AbstractFlow( ModelInstance modelInstance, String elementName, String typeName )
    {
        super( modelInstance, elementName, typeName );
    }

    /**
     * 
     */
    public AbstractFlow( ModelInstance modelInstance, String elementName )
    {
        super( modelInstance, elementName, TYPE_FLOW );
    }

    /**
     * This method registers in the EventsManager of the element, all the events that are generated by this entity.<br>
     * This method also creates the generators for the entity's events
     */
    public void registerGeneratedEvents( )
    {
        generatorStart = createAndRegisterEventGenerator( START_FLOW );
        generatorBackToExecute = createAndRegisterEventGenerator( BACK_TO_EXECUTE_FLOW );
        generatorFinalizing = createAndRegisterEventGenerator( FINALIZING_FLOW );
        generatorReInit = createAndRegisterEventGenerator( REINIT );
    }

    /**
     * Fires the reInit event
     */
    protected void reInitFlow()
    {
        generatorReInit.generate( );
    }
    
    /**
     * Fires the start event
     */
    protected void startFlow( )
    {
        generatorStart.generate( );
    }
    
    /**
     * Fires the start event
     */
    protected void finalizeFlow()
    {
       generatorFinalizing.generate( ); 
    }

    /**
     * Fires the backToExecute event
     */
    protected void backToExecute( )
    {
        generatorBackToExecute.generate( );
    }
}
