package uniandes.cumbia.bpel.elements.wait;

import uniandes.cumbia.openobjects.elements.OpenObject;
import uniandes.cumbia.openobjects.execution.events.generators.EventGenerator;
import uniandes.cumbia.openobjects.execution.instance.ModelInstance;


public abstract class AbstractWait extends OpenObject implements IWait
{
    
    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------
    
    private static final String START_WAIT = "start";
    
    private static final String FINALIZED_WAIT = "finalized";
    
    private static final String REINIT = "reInit";
    
    // -----------------------------------------------------------------
    // Attributes
    // -----------------------------------------------------------------
    
    /**
     * Generator of the event initialize
     */
    private EventGenerator generatorStart;
    
    /**
     * Generator of the event finalized
     */
    private EventGenerator generatorFinalized;
    
    /**
     * Generator of the event reInit
     */
    private EventGenerator generatorReInit;
    
    
    // -----------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------
    
    /**
     * 
     */
    public AbstractWait( ModelInstance modelInstance, String elementName, String typeName )
    {
        super( modelInstance, elementName, typeName );
    }
    
    /**
     * 
     */
    public AbstractWait( ModelInstance modelInstance, String elementName )
    {
        super( modelInstance, elementName, TYPE_WAIT);
    }
    
    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------
    
    /**
     * This method registers in the EventsManager of the element, all the events that are generated by this entity.<br>
     * This method also creates the generators for the entity's events
     */
    public void registerGeneratedEvents()
    {
        generatorFinalized = createAndRegisterEventGenerator(FINALIZED_WAIT);
        generatorStart = createAndRegisterEventGenerator(START_WAIT);
        generatorReInit = createAndRegisterEventGenerator( REINIT );
    }

    /**
     * Fires the wait event
     */
    protected void startWait( )
    {
        generatorStart.generate( );
    }

    /**
     * Fires the finalized event
     */
    protected void finalizedWait( )
    {
        generatorFinalized.generate( );
    }
    
    /**
     * Fires the reInit event
     */
    protected void reInitWait()
    {
        generatorReInit.generate( );
    }
}
