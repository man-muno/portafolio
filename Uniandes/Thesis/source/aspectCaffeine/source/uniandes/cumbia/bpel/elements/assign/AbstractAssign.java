package uniandes.cumbia.bpel.elements.assign;

import uniandes.cumbia.openobjects.elements.OpenObject;
import uniandes.cumbia.openobjects.execution.events.generators.EventGenerator;
import uniandes.cumbia.openobjects.execution.instance.ModelInstance;


public abstract class AbstractAssign extends OpenObject implements IAssign
{

    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    private static final String START_ASSIGN = "start";
    private static final String EXECUTE_NEXT_ASSIGN = "executeNext";
    private static final String FINALIZED_ASSIGN = "finalized";
    private static final String REINIT = "reInit";

    // -----------------------------------------------------------------
    // Attributes
    // -----------------------------------------------------------------

    /**
     * Generator of the event initializeActivity
     */
    private transient EventGenerator generatorStart;

    /**
     * Generator of the event finishActivity
     */
    private transient EventGenerator generatorExecuteNext;

    /**
     * Generator of the event activityFinalized
     */
    private transient EventGenerator generatorFinalized;
    
    /**
     * Generator of the event reInit
     */
    private EventGenerator generatorReInit;


    // -----------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------

    /**
     * 
     */
    public AbstractAssign( ModelInstance modelInstance, String elementName, String typeName )
    {
        super( modelInstance, elementName, typeName );
    }
    
    /**
     * 
     */
    public AbstractAssign( ModelInstance modelInstance, String elementName )
    {
        super( modelInstance, elementName, TYPE_ASSIGN );
    }
    
    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------
    
    /**
     * This method registers in the EventsManager of the element, all the events that are generated by this entity.<br>
     * This method also creates the generators for the entity's events
     */
    public void registerGeneratedEvents()
    {
        generatorStart = createAndRegisterEventGenerator(START_ASSIGN);
        generatorExecuteNext = createAndRegisterEventGenerator(EXECUTE_NEXT_ASSIGN);
        generatorFinalized = createAndRegisterEventGenerator(FINALIZED_ASSIGN);
        generatorReInit = createAndRegisterEventGenerator( REINIT );
    }



    /**
     * Returns the count of the elements. This helps to figure out the amount of elements inside elements like a scope or a flow
     * @return the amount of elements inside the element
     */
    public int getElementCount( )
    {
        return 1;
    }


    /**
     * Initializes the assign
     */
    protected void startAssign( )
    {
        generatorStart.generate( );
    }
    
    /**
     * Fires the reInit event
     */
    protected void reInitAssign()
    {
        generatorReInit.generate( );
    }

    /**
     * Genetrates the event finish
     */
    protected void assignFinalized( )
    {
        generatorFinalized.generate( );
    }

    protected void assignExecuteNext()
    {
        generatorExecuteNext.generate( );
    }
    
}
