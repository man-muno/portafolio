package uniandes.cumbia.aspects.elements.transitionPoint;

import uniandes.cumbia.openobjects.elements.OpenObject;
import uniandes.cumbia.openobjects.execution.events.generators.EventGenerator;
import uniandes.cumbia.openobjects.execution.instance.ModelInstance;

public abstract class AbstractTransitionPoint extends OpenObject implements ITransitionPoint
{

    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    public static final String START = "start";
    
    public static final String EXECUTE = "execute";
    
    public static final String REINIT = "reinit";
    
    public static final String FINALIZED = "finalized";
    
    // -----------------------------------------------------------------
    // Attributes
    // -----------------------------------------------------------------
    

    /**
     * Generator of the event start
     */
    private EventGenerator generatorStart;
    
    /**
     * Generator of the event start
     */
    private EventGenerator generatorExecute;
    
    /**
     * Generator of the event start
     */
    private EventGenerator generatorReInit;
    
    /**
     * Generator of the event start
     */
    private EventGenerator generatorFinalized;

    // -----------------------------------------------------------------
    // Constructors
    // -----------------------------------------------------------------

    
    /**
     * 
     */
    public AbstractTransitionPoint( ModelInstance modelInstance, String elementName, String typeName )
    {
        super( modelInstance, elementName, typeName );
    }
    

    
    // -----------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------
    
    /**
     * This method registers in the EventsManager of the element, all the events that are generated by this entity.<br>
     * This method also creates the generators for the entity's events
     */
    public void registerGeneratedEvents()
    {
        generatorStart = createAndRegisterEventGenerator(START);
        generatorExecute = createAndRegisterEventGenerator(EXECUTE);
        generatorReInit = createAndRegisterEventGenerator(REINIT);
        generatorFinalized = createAndRegisterEventGenerator(FINALIZED);
    }
    
    /**
     * Fires the finalizing event
     */
    protected void finalizing( )
    {
        generatorFinalized.generate( );
    }

    /**
     * Fires the executeTP event
     */
    protected void sendExecuteAdviceEvent( )
    {
        generatorExecute.generate( );
    }

    /**
     * Fires the finalized event
     */
    protected void sendFinalizedEvent( )
    {
        generatorFinalized.generate( );
    }
    
    /**
     * Fires the finalized event
     */
    protected void sendReInitEvent( )
    {
        generatorReInit.generate( );
    }
    
    protected void sendStartEvent()
    {
        generatorStart.generate( );
    }
}
