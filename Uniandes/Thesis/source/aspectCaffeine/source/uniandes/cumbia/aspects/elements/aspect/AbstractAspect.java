/*******************************************************************************
 * $Id: AbstractAspect.java,v 1.1 2009/01/29 21:38:43 man-muno Exp $
 * 
 * Proyecto Cumbia
 * (http://agamenon.uniandes.edu.co/~csw)
 * 
 * Grupo de Investigaci�n en Construcci�n de Software
 * Departamento de Ingenier�a de Sistemas y Computaci�n
 * Universidad de los Andes
 * Bogot� - Colombia
 * 
 * Copyright (c) 2008
 * Todos los derechos reservados. 
 * 
 *******************************************************************************/
package uniandes.cumbia.aspects.elements.aspect;

import uniandes.cumbia.openobjects.elements.OpenObject;
import uniandes.cumbia.openobjects.execution.events.generators.EventGenerator;
import uniandes.cumbia.openobjects.execution.instance.ModelInstance;

/**
 * Abstract Aspect
 */
public abstract class AbstractAspect extends OpenObject implements IAspect
{

    // -----------------------------------------------------------------
    // Constants
    // -----------------------------------------------------------------

    private static final String ASPECT_START = "start";

    private static final String ASPECT_EXECUTE_TP = "executeTP";
    
    private static final String ASPECT_FINALIZED = "finalized";
    
    private static final String ASPECT_RE_INIT = "reinit";


    // -----------------------------------------------------------------
    // OpenObject Attributes
    // -----------------------------------------------------------------

    /**
     * Generator of the event start
     */
    private EventGenerator generatorAspectStart;

    /**
     * Generator of the event finalized
     */
    private EventGenerator generatorAspectFinalized;
    
    /**
     * Generator of the event executeTP
     */
    private EventGenerator generatorAspectExecuteTP;

    /**
     * Generator of the event reinit
     */
    private EventGenerator generatorAspectReInit;
    
 
    
    // -----------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------
    
    /**
     * Creates the new abstract aspect
     * 
     * @param modelInstance This is the model instance where the element exists
     * @param elementName Name that distinguishes the element in the model
     */
    public AbstractAspect(ModelInstance modelInstance, String elementName)
    {
        super(modelInstance, elementName, TYPE_ASPECT);
    }
    
    /**
     * Creates the new abstract aspect
     * 
     * @param modelInstance This is the model instance where the element exists
     * @param elementName Name that distinguishes the element in the model
     * @param typeName Name of the type in the metamodel
     */
    public AbstractAspect(ModelInstance modelInstance, String elementName, String typeName)
    {
        super(modelInstance, elementName, typeName);
    }

    
    // -----------------------------------------------------------------
    // Methods for the BasicElement
    // -----------------------------------------------------------------
    
    /**
     * This method registers in the EventsManager of the element, all the events that are generated by this entity.<br>
     * This method also creates the generators for the entity's events
     */
    public void registerGeneratedEvents()
    {
        generatorAspectStart = createAndRegisterEventGenerator(ASPECT_START);
        generatorAspectExecuteTP = createAndRegisterEventGenerator(ASPECT_EXECUTE_TP);
        generatorAspectReInit = createAndRegisterEventGenerator(ASPECT_RE_INIT);
        generatorAspectFinalized = createAndRegisterEventGenerator(ASPECT_FINALIZED);
    }
    
    /**
     * Initializes the aspect
     */
    protected void initiateAspect()
    {
        generatorAspectStart.generate( );
    }
    
    /**
     * Generates the executeTP event
     */
    protected void executeTP( )
    {
        generatorAspectExecuteTP.generate( );
    }

    /**
     * Method called when all transition points are finished executing
     */
    protected void finalizedAspect( )
    {
        generatorAspectFinalized.generate( );
    }
    
    /**
     * Generates the reInit event
     */
    protected void reInit( )
    {
        generatorAspectReInit.generate( );
    }

}
