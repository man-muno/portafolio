package week4;

import java.util.*;

public class Knapsack {

	// A utility function that returns maximum of two integers
	static int max(int a, int b) {
		return (a > b) ? a : b;
	}

	// Returns the maximum value that can be put in a knapsack of capacity W
	static int knapSack(int totalWeight, int weights[], int values[]) {
		int K[][] = new int[weights.length + 1][totalWeight + 1];

		// Build table K[][] in bottom up manner
		for (int i = 0; i <= weights.length; i++) {
			for (int w = 0; w <= totalWeight; w++) {
				if (i == 0 || w == 0)
					K[i][w] = 0;
				else if (weights[i - 1] <= w)
					K[i][w] = max(values[i - 1] + K[i - 1][w - weights[i - 1]],K[i - 1][w]);
				else
					K[i][w] = K[i - 1][w];
			}
		}

		return K[weights.length+1][totalWeight];
	}

	// Driver program to test above function
	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		int total_weight, n;
		total_weight = scanner.nextInt();
		n = scanner.nextInt();
		int[] weights = new int[n];
		for (int i = 0; i < n; i++) {
			weights[i] = scanner.nextInt();
		}
		System.out.println(knapSack(total_weight, weights, weights));
	}

}
