package week4;

import java.util.*;

public class PrimitiveCalculator {

	private static int[] resp;

	private static void optimal_sequence2(int n) {

		int i = 1;
		while (i <= n) {
			if (resp[i] == 0) {
				int mult3 = 10000;
				int mult2 = 10000;
				int plus1 = 10000;
				if (i % 3 == 0) 
					mult3 = resp[i / 3];
					if (i % 2 == 0) 
						mult2 = resp[i / 2];
					
					plus1 = resp[i - 1];

					if (mult3 <= mult2 && mult3 <= plus1) {
						// mult3 is lower than the other two
						resp[i] = mult3 + 1;
					} else if (mult2 <= mult3 && mult2 <= plus1) {
						// mult2 is lower than the other two
						resp[i] = mult2 + 1;
					} else {
						// sum1 is the smallest
						resp[i] = plus1 + 1;
					}
				}
			}
			i++;

		}
	}

	private static List<Integer> optimal_sequence(int n) {
		List<Integer> sequence = new ArrayList<Integer>();
		while (n >= 1) {
			sequence.add(n);
			if (n % 3 == 0) {
				n /= 3;
			} else if (n % 2 == 0) {
				n /= 2;
			} else {
				n -= 1;
			}
		}
		Collections.reverse(sequence);
		return sequence;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		resp = new int[n + 1];
		resp[0] = -1;
		resp[1] = 1;
		resp[2] = 1;
		resp[3] = 1;
		optimal_sequence2(n);
		/*
		 * System.out.println(sequence.size() - 1); for (Integer x : sequence) {
		 * System.out.print(x + " "); }
		 */
	}

	public class Segment {

		private int from;

		private int number;

		public Segment(int number, int from) {
			this.number = number;
			this.from = from;
		}

	}

}
