import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;

public class PointsAndSegments {

	private static Random random = new Random();

	private static int[] fastCountSegments(int[] starts, int[] ends,
			int[] points) {
		int[] cnt = new int[points.length];
		// write your code here
		for (int i = 0; i < points.length; i++) {
			int point = points[i];
			
			
			
			if (starts[j] <= points[i] && points[i] <= ends[j]) {
				cnt[i]++;
			}

		}

		return cnt;
	}

	private static int[] naiveCountSegments(int[] starts, int[] ends,
			int[] points) {
		int[] cnt = new int[points.length];
		for (int i = 0; i < points.length; i++) {
			for (int j = 0; j < starts.length; j++) {
				if (starts[j] <= points[i] && points[i] <= ends[j]) {
					cnt[i]++;
				}
			}
		}
		return cnt;
	}

	private static void swap(int[] a, int[] b, int l, int j) {
		int t = a[l];
		a[l] = a[j];
		a[j] = t;

		t = b[l];
		b[l] = b[j];
		b[j] = t;

	}

	private static void randomizedQuickSort(int[] a, int[] b, int low, int high) {
		if (low >= high) {
			return;
		}
		int randomIndex = random.nextInt(high - low + 1) + low;
		swap(a, b, low, randomIndex);
		// use partition3
		int pivot = partition3(a, b, low, high);
		randomizedQuickSort(a, b, low, pivot - 1);
		randomizedQuickSort(a, b, pivot + 1, high);
	}

	private static int partition3(int[] a, int[] b, int l, int r) {
		// write your code here
		int start_pivot = l;
		int end_pivot = l;
		int start_bigger = r;
		int pivot = a[l];

		for (int i = l + 1; i <= start_bigger; i++) {
			if (a[i] < pivot) {
				swap(a, b, start_pivot, i);
				start_pivot++;
				end_pivot++;
			} else if (a[i] > pivot) {
				swap(a, b, start_bigger, i);
				i--;
				start_bigger--;
			} else
				end_pivot++;
		}

		return start_pivot;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int n, m;
		n = scanner.nextInt();
		m = scanner.nextInt();
		int[] starts = new int[n];
		int[] ends = new int[n];
		int[] points = new int[m];
		for (int i = 0; i < n; i++) {
			starts[i] = scanner.nextInt();
			ends[i] = scanner.nextInt();
		}
		for (int i = 0; i < m; i++) {
			points[i] = scanner.nextInt();
		}
		// use fastCountSegments
		randomizedQuickSort(starts, ends, 0, starts.length - 1);
		int[] cnt = fastCountSegments(starts, ends, points);
		for (int x : cnt) {
			System.out.print(x + " ");
		}
	}
	
	private class Pair{
		
	}
	
}
